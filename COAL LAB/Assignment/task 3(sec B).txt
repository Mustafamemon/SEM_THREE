INCLUDE Irvine32.inc

.data
	string1 byte "a+b-c+d*e*f/g",0
	string2 byte LENGTHOF string1-1 dup(?)
.code
main PROC
	mov eax,0
	mov ebx,0
	push ebp
	mov ebp,esp
	
	mov edx,OFFSET string1+LENGTHOF string1-1
	mov esi,OFFSET string2
	mov ecx,LENGTHOF string1
l1:
	mov al,[edx]
	cmp al,'-'
	je common
	cmp al,'+'
	je common
	cmp al,'/'
	je common
	cmp al,'*'
	je common
	jmp common2
common:
	cmp al,'-'
	je prece1
	cmp al,'+'
	je prece2
	cmp al,'/'
	je prece3
	cmp al,'*'
	je prece4
prece1: 
		mov al,1
		jmp prece
prece2: 
		mov al,2
		jmp prece
prece3: 
		mov al,3
		jmp prece
prece4:
		mov al,4
prece:
	cmp ebp,esp
	jne common1
	push eax
	jmp endd
common1:
	mov bl,[esp]
	cmp bl,al
	jbe pushing
com:	
	mov ebx,0
	pop ebx
	cmp ebx,1
	je prec1
	cmp ebx,2
	je prec2
	cmp ebx,3
	je prec3
	cmp ebx,4
	je prec4

prec1: 
		mov bl,'-'
		jmp prec
prec2: 
		mov bl,'+'
		jmp prec
prec3: 
		mov bl,'/'
		jmp prec
prec4:
		mov bl,'*'
prec:
	mov [esi],bl
	add esi,TYPE string2
	cmp ebp,esp
	jne com
pushing:
		push eax
		jmp endd
common2:
	mov [esi],al
	add esi,TYPE string2
endd:
	sub edx,TYPE string1
loop l1
comparing:
	cmp ebp,esp
	je popping	
	pop eax
	cmp eax,1
	je preced1
	cmp eax,2
	je preced2
	cmp eax,3
	je preced3
	cmp eax,4
	je preced4
preced1: 
		mov al,'-'
		jmp preced
preced2: 
		mov al,'+'
		jmp preced
preced3: 
		mov al,'/'
		jmp preced
preced4:
		mov al,'*'
preced:
	mov [esi],al
	add esi,TYPE string2	
	jmp comparing
popping:
	pop ebp
	mov eax,0
	mov ecx,LENGTHOF string1
	mov edx,OFFSET string2+lengthof string2
l2:
	mov al,[edx]
	call writechar
	DEC edx
loop l2
exit
main endp
end main